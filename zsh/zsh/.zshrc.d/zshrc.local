#!/bin/bash
##
# Copyright 2020 Anthony Marquez <@boogeymarquez>
#
# BSD licensed, see LICENSE.txt in this repository.

# Check if a command exists
function can_haz() {
  which "$@" > /dev/null 2>&1
}

# Setting up Golang environment variables
export GOPATH=$HOME/golang
export GOBIN=$GOPATH/bin

# Setting up pyenv environment variables
export PYENV_ROOT=$HOME/.pyenv

# Mac specific installed with homebrew
if can_haz mise > /dev/null; then
  export GOROOT=$(mise where go)
else
  if [[ "$(uname -s)" == "Darwin" ]]; then
    if can_haz brew; then
      export GOROOT=$(brew --prefix golang)/libexec
    fi
  else
    export GOROOT=/usr/local/go
  fi
fi

# Conditional PATH additions
for path_candidate in $PYENV_ROOT/bin \
  ~/.local/bin \
  /usr/local/go/bin \
  $GOPATH/bin 
do
  if [ -d ${path_candidate} ]; then
    export PATH="${PATH}:${path_candidate}"
  fi
done

# Setup pyenv to manage Python environments
#export PATH="$HOME/.pyenv/bin:$PATH"
if can_haz pyenv > /dev/null; then 
  eval "$(pyenv init --path)"
  eval "$(pyenv init -)"

  if can_haz pyenv-virtualenv-init > /dev/null; then 
    eval "$(pyenv virtualenv-init -)"
#     pyenv virtualenvwrapper_lazy
  fi
fi

export VIRTUAL_ENV_DISABLE_PROMPT=1
export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/Devel
export PYENV_VIRTUALENVWRAPPER_PREFER_PYVENV="true"

# Setup jenv to manage JAVA environments
# Try to find jenv, if it's not on the path
export JENV_ROOT="${JENV_ROOT:=${HOME}/.jenv}"
# if ! type jenv > /dev/null && [ -f "${JENV_ROOT}/bin/jenv" ]; then
#     export PATH="${JENV_ROOT}/bin:${PATH}"
# fi

# Lazy load jenv
if type jenv > /dev/null; then
    export PATH="${JENV_ROOT}/bin:${JENV_ROOT}/shims:${PATH}"
    function jenv() {
        unset -f jenv
        eval "$(command jenv init -)"
        jenv $@
    }
fi

# setup rbenv to manage Ruby environments
if can_haz rbenv > /dev/null; then
  eval "$(rbenv init -)"
fi

# Adding nvm
export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
if [ -d $NVM_DIR ]; then
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
fi

# Adding direnv tool
if can_haz direnv > /dev/null; then 
  eval "$(direnv hook zsh)"
fi

# Check if Visual Studio Code executable exists
if [[ -x "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" ]]; then
    # Check if symbolic link already exists
    if [[ ! -h "/usr/local/bin/code" ]]; then
        # Create symbolic link
        ln -s "/Applications/Visual Studio Code.app/Contents/Resources/app/bin/code" /usr/local/bin/code
        # echo "Symbolic link for 'code' command created successfully."
    else
        # echo "Symbolic link '/usr/local/bin/code' already exists."
    fi
else
    # echo "Visual Studio Code executable not found. Please install Visual Studio Code."
fi

# This is not commented out for `work-airbnb` branch
#####################################
########## AIRBNB SPECIFIC ##########
#####################################

unset -f watch
#unset -f k
# Source Airlab's shell integration, if it exists.
if [ -e ~/.airlab/shellhelper.sh ]; then
  source ~/.airlab/shellhelper.sh
fi
# AIRLAB-DO-NOT-MODIFY section:ShellWrapper }}}

# Conditional PATH additions
# from https://gist.github.com/ryanorsinger/7d89ad58901b5590ec3e1f23d7b9f887
for path_candidate in /usr/local/bin 
do
  if [ -d ${path_candidate} ]; then
    export PATH="${path_candidate}:${PATH}"
  fi
done

export ONETOUCHGEN_LDAP_USER=anthony_marquez
export ONETOUCHGEN_ACCEPT_EULA=y
export DATA_DIR=/Users/anthony_marquez/dev/airbnb/data
autoload -U compinit; compinit
source <(yak completion zsh)

if [ -s ~/.gvm/scripts/gvm ]; then
  source ~/.gvm/scripts/gvm
fi

###########
### END ###
###########
